{"remainingRequest":"/Users/tessacj/Movies/Speur-Budget-Website/Speur-website/speur-ubudget/node_modules/babel-loader/lib/index.js!/Users/tessacj/Movies/Speur-Budget-Website/Speur-website/speur-ubudget/node_modules/eslint-loader/index.js??ref--13-0!/Users/tessacj/Movies/Speur-Budget-Website/Speur-website/speur-ubudget/src/scripts/API.js","dependencies":[{"path":"/Users/tessacj/Movies/Speur-Budget-Website/Speur-website/speur-ubudget/src/scripts/API.js","mtime":1622160618018},{"path":"/Users/tessacj/Movies/Speur-Budget-Website/Speur-website/speur-ubudget/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tessacj/Movies/Speur-Budget-Website/Speur-website/speur-ubudget/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tessacj/Movies/Speur-Budget-Website/Speur-website/speur-ubudget/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy90ZXNzYWNqL01vdmllcy9TcGV1ci1CdWRnZXQtV2Vic2l0ZS9TcGV1ci13ZWJzaXRlL3NwZXVyLXVidWRnZXQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwovLyBjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJykuZGVmYXVsdDsKdmFyIGJhc2VfdXJsID0gJ2h0dHBzOi8vdGVzc2EuYnVkZ2V0YXBpLnNwZXVyaG9sZGluZ3MuY29tJzsKZXhwb3J0IHZhciBwb3N0TG9naW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHVzciwgcHdkKSB7CiAgICB2YXIgZW5kUG9pbnQsIHVybCwgZGF0YSwgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGVuZFBvaW50ID0gJy9sb2dpbic7CiAgICAgICAgICAgIHVybCA9IGJhc2VfdXJsICsgZW5kUG9pbnQ7CiAgICAgICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICAgImVtYWlsIjogdXNyLAogICAgICAgICAgICAgICJwYXNzd29yZCI6IHB3ZAogICAgICAgICAgICB9OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIGZldGNoKHVybCwgewogICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpCiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygiVGhlcmUgd2FzIGFuIGVycm9yOiAiLCBlcnIpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UuanNvbihyZXNwb25zZSkpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBwb3N0TG9naW4oX3gsIF94MikgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7CmV4cG9ydCB2YXIgcG9zdFVzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIobmFtZSwgZW1haWwsIHB3ZCkgewogICAgdmFyIGVuZFBvaW50LCB1cmwsIGRhdGEsIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgZW5kUG9pbnQgPSAnL3VzZXJzJzsKICAgICAgICAgICAgdXJsID0gYmFzZV91cmwgKyBlbmRQb2ludDsKICAgICAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgICAibmFtZSI6IG5hbWUsCiAgICAgICAgICAgICAgImVtYWlsIjogZW1haWwsCiAgICAgICAgICAgICAgInBhc3N3b3JkIjogcHdkCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIGZldGNoKHVybCwgewogICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpCiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygiVGhlcmUgd2FzIGFuIGVycm9yOiAiLCBlcnIpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5qc29uKHJlc3BvbnNlKSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gcG9zdFVzZXIoX3gzLCBfeDQsIF94NSkgewogICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOyAvLyBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgewovLyAgICAgbWV0aG9kOiAnUE9TVCcsIC8vICpHRVQsIFBPU1QsIFBVVCwgREVMRVRFLCBldGMuCi8vICAgICBtb2RlOiAnY29ycycsIC8vIG5vLWNvcnMsICpjb3JzLCBzYW1lLW9yaWdpbgovLyAgICAgY2FjaGU6ICduby1jYWNoZScsIC8vICpkZWZhdWx0LCBuby1jYWNoZSwgcmVsb2FkLCBmb3JjZS1jYWNoZSwgb25seS1pZi1jYWNoZWQKLy8gICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLCAvLyBpbmNsdWRlLCAqc2FtZS1vcmlnaW4sIG9taXQKLy8gICAgIGhlYWRlcnM6IHsKLy8gICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwovLyAgICAgICAvLyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCi8vICAgICB9LAovLyAgICAgcmVkaXJlY3Q6ICdmb2xsb3cnLCAvLyBtYW51YWwsICpmb2xsb3csIGVycm9yCi8vICAgICByZWZlcnJlclBvbGljeTogJ25vLXJlZmVycmVyJywgLy8gbm8tcmVmZXJyZXIsICpuby1yZWZlcnJlci13aGVuLWRvd25ncmFkZSwgb3JpZ2luLCBvcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4sIHNhbWUtb3JpZ2luLCBzdHJpY3Qtb3JpZ2luLCBzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luLCB1bnNhZmUtdXJsCi8vICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSAvLyBib2R5IGRhdGEgdHlwZSBtdXN0IG1hdGNoICJDb250ZW50LVR5cGUiIGhlYWRlcgovLyAgIH0pOwovLyAgIHJldHVybiByZXNwb25zZS5qc29uKCk7IC8vIHBhcnNlcyBKU09OIHJlc3BvbnNlIGludG8gbmF0aXZlIEphdmFTY3JpcHQgb2JqZWN0cw=="},{"version":3,"sources":["/Users/tessacj/Movies/Speur-Budget-Website/Speur-website/speur-ubudget/src/scripts/API.js"],"names":["base_url","postLogin","usr","pwd","endPoint","url","data","fetch","method","headers","body","JSON","stringify","catch","err","console","log","response","json","postUser","name","email"],"mappings":";;;AAAA;AAGA,IAAMA,QAAQ,GAAG,2CAAjB;AAEA,OAAO,IAAMC,SAAS;AAAA,qEAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,QADe,GACJ,QADI;AAEfC,YAAAA,GAFe,GAETL,QAAQ,GAAGI,QAFF;AAIfE,YAAAA,IAJe,GAIR;AAAC,uBAASJ,GAAV;AAAe,0BAAYC;AAA3B,aAJQ;AAAA;AAAA,mBAMEI,KAAK,CAACF,GAAD,EAAM;AAC9BG,cAAAA,MAAM,EAAE,MADsB;AAE9BC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFqB;AAK9BC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AALwB,aAAN,CAAL,CAMlBO,KANkB,CAMZ,UAAAC,GAAG,EAAI;AACZC,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,GAApC;AACH,aARoB,CANF;;AAAA;AAMfG,YAAAA,QANe;AAAA,6CAgBZA,QAAQ,CAACC,IAAT,CAAcD,QAAd,CAhBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAThB,SAAS;AAAA;AAAA;AAAA,GAAf;AAmBP,OAAO,IAAMkB,QAAQ;AAAA,sEAAG,kBAAOC,IAAP,EAAaC,KAAb,EAAoBlB,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,YAAAA,QADc,GACH,QADG;AAEdC,YAAAA,GAFc,GAERL,QAAQ,GAAGI,QAFH;AAIdE,YAAAA,IAJc,GAIP;AAAC,sBAAQc,IAAT;AAAe,uBAASC,KAAxB;AAA+B,0BAAYlB;AAA3C,aAJO;AAAA;AAAA,mBAMGI,KAAK,CAACF,GAAD,EAAM;AAC9BG,cAAAA,MAAM,EAAE,MADsB;AAE9BC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFqB;AAK9BC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AALwB,aAAN,CAAL,CAMlBO,KANkB,CAMZ,UAAAC,GAAG,EAAI;AACZC,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,GAApC;AACH,aARoB,CANH;;AAAA;AAMdG,YAAAA,QANc;AAAA,8CAgBXA,QAAQ,CAACC,IAAT,CAAcD,QAAd,CAhBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARE,QAAQ;AAAA;AAAA;AAAA,GAAd,C,CAsBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// const axios = require('axios').default;\n\n\nconst base_url = 'https://tessa.budgetapi.speurholdings.com';\n\nexport const postLogin = async (usr, pwd) => {\n    const endPoint = '/login'\n    const url = base_url + endPoint\n\n    const data = {\"email\": usr, \"password\": pwd}\n\n    const response = await fetch(url, {\n        method: 'POST', \n        headers: {\n          'Content-Type': 'application/json'       \n        },\n        body: JSON.stringify(data) \n      }).catch(err => {\n          console.log(\"There was an error: \", err)\n      });\n      \n      return response.json(response); \n}\n\nexport const postUser = async (name, email, pwd) => {\n    const endPoint = '/users'\n    const url = base_url + endPoint\n\n    const data = {\"name\": name, \"email\": email, \"password\": pwd}\n\n    const response = await fetch(url, {\n        method: 'POST', \n        headers: {\n          'Content-Type': 'application/json'       \n        },\n        body: JSON.stringify(data) \n      }).catch(err => {\n          console.log(\"There was an error: \", err)\n      });\n      \n      return response.json(response); \n}\n\n\n\n\n// const response = await fetch(url, {\n//     method: 'POST', // *GET, POST, PUT, DELETE, etc.\n//     mode: 'cors', // no-cors, *cors, same-origin\n//     cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n//     credentials: 'same-origin', // include, *same-origin, omit\n//     headers: {\n//       'Content-Type': 'application/json'\n//       // 'Content-Type': 'application/x-www-form-urlencoded',\n//     },\n//     redirect: 'follow', // manual, *follow, error\n//     referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n//     body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n//   });\n//   return response.json(); // parses JSON response into native JavaScript objects"]}]}